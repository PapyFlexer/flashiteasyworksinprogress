package com.flashiteasy.api.utils
{
	import com.flashiteasy.api.core.CompositeParameterSet;
	
	import flash.utils.describeType;
	import flash.utils.getQualifiedClassName;
	
	public class ArrayUtils
	{

		public static function clone(source:Array) : Array 
		{
			var array : Array = [];
			for each ( var ob:* in source)
			{
				 trace ("cloning parameters sets type="+getQualifiedClassName(ob)+".");
				if (ob is CompositeParameterSet)
				{
					trace (getQualifiedClassName(ob)+" is Composite, so we clone its internal props");
					var pSet:CompositeParameterSet = CompositeParameterSet(ob);
					var clonedPset:CompositeParameterSet=new CompositeParameterSet;
					var params:Array=ArrayUtils.clone(pSet.getParametersSet());					
					var _array : Array = [];
					for each ( var _ob : Object in params)
					{
						trace ("\t => adding "+getQualifiedClassName(_ob) +" internally");
						_array.push(CloneUtils.clone(_ob));	
					}
					clonedPset.setParameterSet(_array);
					array.push(clonedPset);
				}
				else 
				{ 
					array.push(CloneUtils.clone(ob));
				}
			}
			/*var myBA:ByteArray = new ByteArray();
		    myBA.writeObject(source);
		    myBA.position = 0;
		    return(myBA.readObject());*/
		    return array ;

		}
		
		public static function compareArrays( a:Array, b:Array ) : Boolean
		{
			if(a == null || b==null) return false;
			var l:uint = a.length;
			if (b.length != l) return false;
			for (var i:uint = 0; i<l; i++)
			{
				if ( a[i] !== b[i] ) return false;
			}
			return true;
		}
		
		public static function getIndex( a:Array , value:Object ) : int
		{
			var i:int;
			for(i=0;i<a.length;i++){
				if(a[i] == value )
					return i;
			}
			return -1;
		}
		
		public function isItemInArray(a : Array, item : *) : Boolean
		{
			return a.lastIndexOf(item) != -1;
		}
		
		public static function containsString ( value : String , a:Array ) : Boolean
		{
			var test:String ;
			for each( test in a ) 
			{
				if(test == value)
				{
					return true;
				}
			}
			return false;
		}
		
		public static function contains ( a:Array , value:Object):Boolean {
			var o : Object 
			for each (o in a ){
				if( getQualifiedClassName(o) == getQualifiedClassName(value) ){
					return true;
				}
			}
			return false;
		}
		
		public static function isItemInArray(a : Array, item : *) : Boolean
		{
			return a.lastIndexOf(item) != -1;
		}
		
		public static function getItemIndexInArray(a : Array, item : *) : int
		{
			return a.indexOf(item);
		}
		
		public static function removeElement(elements:Array,ob:*):void{
			var i:int;
			var length:int=elements.length;
			for(i=0; i < length ; i++)
			{

				if (elements[i] == ob)
				{
					elements.splice(i, 1);
					return ;
				}
			}
		}
		
		public static function removeDuplicate( originalArray : Array ) : Array {
			var lookup : Array = new Array();
			var uniqueArr : Array = new Array();
			var num : int;
			for(var idx:int=0;idx < originalArray.length;idx++)
			{
				num = originalArray[idx];
				if (!lookup[num] )
				{
					var obj:Object=new Object();
					obj.id=num;
			 		obj.count=0;
					uniqueArr.push(num);
					lookup[num]=true;
				}
			}
			return(uniqueArr);
		}
		
		public static function getConstant(name:Class):Array{
			var a:Array= [];
			var typeXML:XML=describeType(name);
			for each (var constant:XML in typeXML.constant)
			{
				a.push(name[constant.@name]);
			}
			return a;
		}

	}
}