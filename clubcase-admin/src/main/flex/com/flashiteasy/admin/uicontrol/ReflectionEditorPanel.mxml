<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 paddingTop="0"
		 implements="com.flashiteasy.admin.edition.IElementEditorPanel">
	<mx:Script>
		<![CDATA[
			import com.flashiteasy.api.fieservice.transfer.tr.RemoteParameterListTO;
			import com.flashiteasy.admin.parameter.ParameterIntrospectionUtil;
			import com.flashiteasy.api.fieservice.transfer.vo.RemoteParameterSet;
			import com.flashiteasy.admin.uicontrol.parameter.ParameterEditorFactory;
			import com.flashiteasy.api.parameters.ChangeValueParameterSet;
			import com.flashiteasy.admin.uicontrol.parameter.ChangeParameterEditor;
			import com.flashiteasy.admin.components.MaskType;
			import com.flashiteasy.api.core.CompositeParameterSet;
			import com.flashiteasy.api.parameters.TextParameterSet;
			import mx.controls.RichTextEditor;
			import mx.controls.Tree;
			import com.flashiteasy.admin.conf.Conf;
			import com.flashiteasy.api.parameters.FilterParameterSet;
			import com.flashiteasy.admin.components.filterComponents.FilterWorkbench;
			import com.flashiteasy.admin.components.filterComponents.FilterPopUp;
			import com.flashiteasy.api.core.project.Page;
			import com.flashiteasy.api.bootstrap.AbstractBootstrap;
			import com.flashiteasy.api.parameters.InternalLinkParameterSet;
			import com.flashiteasy.admin.ApplicationController;
			import com.flashiteasy.admin.visualEditor.VisualSelector;
			import com.flashiteasy.admin.commands.menus.ChangeParameterCommand;
			import com.flashiteasy.admin.commands.ICommand;
			import mx.events.FlexEvent;
			import mx.core.UIComponent;
			import com.flashiteasy.api.core.AbstractParameterSet;
			import mx.controls.List;
			import com.flashiteasy.admin.components.EventEditor;
			import com.flashiteasy.admin.components.FieColorPicker;
			import com.flashiteasy.admin.components.FilePicker;
			import com.flashiteasy.admin.components.advancedSlider;
			import com.flashiteasy.admin.edition.ParameterSetEditionDescriptor;
			import com.flashiteasy.admin.parameter.Parameter;
			import com.flashiteasy.api.utils.DisplayListUtils;
			import com.flashiteasy.admin.workbench.IElementEditor;
			import com.flashiteasy.api.core.IParameterSet;
			import com.flashiteasy.api.core.IParameterSetStaticValues;
			import com.flashiteasy.api.parameters.PositionParameterSet;
			import com.flashiteasy.api.parameters.RotationParameterSet;
			import com.flashiteasy.api.parameters.SizeParameterSet;
			import com.flashiteasy.api.utils.ArrayUtils;

			import mx.containers.FormItem;
			import mx.containers.HBox;
			import com.flashiteasy.admin.components.advancedSlider;
			import com.flashiteasy.api.core.IParameterSetStaticValues;
			import com.flashiteasy.api.core.IParameterSet;
			import com.flashiteasy.admin.workbench.IElementEditor;
			import mx.controls.CheckBox;
			import mx.controls.Label;
			import mx.controls.TextInput;
			import mx.controls.NumericStepper;
			import mx.containers.FormItem;
			import com.flashiteasy.admin.parameter.Parameter;
			import com.flashiteasy.admin.edition.ParameterSetEditionDescriptor;
			import mx.controls.ComboBox;
			import com.flashiteasy.api.utils.ArrayUtils;
			import com.flashiteasy.admin.components.FieColorPicker;
			import mx.controls.HSlider;
			
			private var editor:IElementEditor;
			private var parameterSetDescriptor:ParameterSetEditionDescriptor;
			private var _parameterSet:IParameterSet;
			public var control:DisplayObject;
			public var controlList:Object = new Object;

			import com.flashiteasy.admin.conf.Ref;

			public function getDescriptor():ParameterSetEditionDescriptor
			{
				return parameterSetDescriptor;
			}

			public function reset(editor:IElementEditor, descriptor:ParameterSetEditionDescriptor):void
			{
				//We set the focus to prevent a bug with the AdminManager KeyBoardListener not reacting anymore when the component that had focus is destroy
				this.setFocus();
				this.editor=editor;
				this.parameterSetDescriptor=descriptor;
				form.removeAllChildren();
				description=Conf.languageManager.getLanguage(parameterSetDescriptor.getDescription());
				if (description == "null" && contains(topLabel))
				{
					removeChild(topLabel);
				}
				_parameterSet=descriptor.getParameterSet();
				layoutParameters(parameterSetDescriptor.getParameters());
			}

			public function update(param:IParameterSet, update:Boolean=false):void
			{
				var d:DisplayObject;
				if (param is PositionParameterSet)
				{
					d=DisplayListUtils.findControl(form, "x");
					NumericStepper(d).value=new Number((param as PositionParameterSet).x);
					d=DisplayListUtils.findControl(form, "y");
					NumericStepper(d).value=new Number((param as PositionParameterSet).y);
				}
				else if (param is SizeParameterSet)
				{
					d=DisplayListUtils.findControl(form, "width");
					NumericStepper(d).value=new Number((param as SizeParameterSet).width);
					d=DisplayListUtils.findControl(form, "height");
					NumericStepper(d).value=new Number((param as SizeParameterSet).height);
				}
				else if (param is RotationParameterSet)
				{
					d=DisplayListUtils.findControl(form, "rotation");
					advancedSlider(d).value=new Number((param as RotationParameterSet).rotation);

				}
				else if (param is InternalLinkParameterSet)
				{

				}
				if (update)
				{
					d.dispatchEvent(new Event(Event.CHANGE));
				}
			}

			private function layoutParameters(params:Array):void
			{
				// Waiting for the form to be ready
				if (form == null)
				{
					callLater(layoutParameters, [params]);
					return;
				}
				var startRowIndex:Number=-1;
				var itemBox:HBox=new HBox();
				itemBox.percentWidth=100;
				itemBox.percentHeight=100;
				var method:Function;
				//var remoteP: RemoteParameterSet = ParameterIntrospectionUtil.parameterSetDescriptor.
				for each (var p:Parameter in params)
				{
					var rowIndex:Number=p.row;
					var la:Label=new Label();
					la.width=50;
					if (rowIndex > startRowIndex)
					{
						form.addChild(itemBox);
						itemBox=new HBox();
						itemBox.percentWidth=100;
						itemBox.percentHeight=100;
						startRowIndex=rowIndex;
					}

					la.text=Conf.languageManager.getLanguage(p.getLabel());
					//method=this["get" + p.getType() + "Control"];
					//method.apply(this, [p]);
					var factory:ParameterEditorFactory=new ParameterEditorFactory;
					control=factory.getEditor(p, _parameterSet);
					controlList[control.name] = control;
					if (p.getLabel() != "null")
						itemBox.addChild(la);
					if (control != null)
					{
						// As the properties correspond to accessors, we're sure they are unique
						itemBox.addChild(control);

						control.addEventListener("change", itemChanged, false, 0, true);
						control.addEventListener(FocusEvent.FOCUS_OUT, outFocusHandler, false, 0, true);
					}
				}

				form.addChild(itemBox);
			}

			private function itemChanged(e:Event):void
			{

				var targetName:String=e.target.name;
				var param:IParameterSet=parameterSetDescriptor.getParameterSet();
				//TODO this condition should be replace by a clean check for linked parameters
				/*if (getQualifiedClassName(e.target).split("::")[1] == "FilterWorkbench")
				{
					changedList=ApplicationController.getInstance().getElementEditor().getParameterList(parameterSetDescriptor.getParameterSet());
				}
				else
				{*/
					changedList=e.target.hasOwnProperty("changedList") ? e.target.changedList : [e.target.name];
				//}
				if (!ArrayUtils.compareArrays(Ref.adminManager.changedParameterList, changedList) && Ref.adminManager.changedParameterList != null)
					Ref.adminManager.checkForCommitParameterChange();


				//Before changing value we stock a previousValueList object for undo
				if(e.target.hasOwnProperty("previousValueList"))
				{
					setPreviousValue(changedList, e.target.previousValueList);
				}
				 else
				{
					setPreviousValue(changedList);
				}

				Ref.adminManager.changedDescriptor=parameterSetDescriptor;
				Ref.adminManager.changedParameterList=changedList;

				var factory:ParameterEditorFactory=new ParameterEditorFactory;
				factory.updateParameterWithEditorValue(DisplayObject(e.target), param);


				// TODO Replace the if...else if statements with a clean mapping class

				editor.parameterSetUpdated(parameterSetDescriptor.getParameterSet());
				//We get the values for each selected blocks
				var newValueList:Object=ApplicationController.getInstance().getElementEditor().getParameterValueList(Ref.adminManager.changedParameterList, Ref.adminManager.changedDescriptor);
				//
				addParameterChangeCommand(changedList, parameterSetDescriptor, newValueList, Ref.adminManager.previousValueList);

			}

			/**
			 * Handler used for check of change values when we Focus out of the component
			 */
			private function outFocusHandler(e:FocusEvent):void
			{

				//If changes have occured
				if (Ref.adminManager.changedParameterList != null)
				{
					//If the component that loses focus is the current param or one of is child
					var currentParamLostFocus:Boolean=(String(e.target).indexOf(("." + Ref.adminManager.changedParameterList[0] + ".")) != -1 || Ref.adminManager.changedParameterList[0] == e.target.name);

					//And if the current param have been change
					if (currentParamLostFocus && Ref.adminManager.focusOutEnabled)
					{
						Ref.adminManager.checkForCommitParameterChange();

					}
				}
			}

			private var changedList:Array=[];

			public function setPreviousValue(changedParameterList:Array=null, previousValue:Object = null):void
			{

				if (!ArrayUtils.compareArrays(Ref.adminManager.changedParameterList, changedList))
				
				{
					Ref.adminManager.previousValueList = previousValue != null ? previousValue : ApplicationController.getInstance().getElementEditor().getParameterValueList(changedList, parameterSetDescriptor);
					trace("Setpreviousvalue :: " + Ref.adminManager.previousValueList);
				}
			}

			public function addParameterChangeCommand(propertyList:Array, descriptor:ParameterSetEditionDescriptor, valueList:Object, oldValueList:Object):void
			{
				ApplicationController.getInstance().getElementEditor().notifyParameterChange(propertyList, descriptor, valueList, oldValueList);


			}


			[Bindable]
			private var description:String;
		]]>
	</mx:Script>
	<mx:Label text="{description}"
			  id="topLabel"
			  paddingLeft="4"
			  paddingBottom="0"/>
	<mx:Form id="form"
			 indicatorGap="4"
			 height="100%"
			 paddingLeft="4"
			 paddingRight="4"
			 paddingBottom="0"
			 paddingTop="0"
			 width="290"/>
</mx:VBox>
