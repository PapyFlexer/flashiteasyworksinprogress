/**
 * FLASHITEASY API 1.0 : Framework for visual interactive developpement <http://www.flashiteasy.com/>
 *
 * FLASHITEASY API 1.0 is (c) 2008-2011 by Robert DEVOS, Didier REYT, Gilles ROQUEFEUIL & Dany SIRIPHOL
 * This software is released under the MIT License <http://www.opensource.org/licenses/mit-license.php/>
 *
 */
package com.flashiteasy.api.assets
{
	import com.flashiteasy.api.core.project.XMLFile;
	import com.flashiteasy.api.selection.XMLFileList;
	import com.flashiteasy.api.utils.StringUtils;
	
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IOErrorEvent;
	import flash.net.URLLoader;
	import flash.net.URLRequest;
	import flash.utils.Dictionary;
	
	/**
	 * The <code><strong>XMLContainerLoader</strong></code> class manages the loading of an external xml file
	 * so dynamic templates (generated by FIE admin) are loadable at run-time in the project.
	 * 
	 * <p> This class comes in a pseudo-singleton so must be called
	 * using a <code>XMLContainerLoader.getInstance();</code> instruction.</p>
	 * 
	 */
	public class XMLContainerLoader extends EventDispatcher
	{

		private static var xmlList : Array = [];
		private var xmls : Dictionary = new Dictionary(true);
		private static var method : Function ;
		private static var object : Object ; 


		/**
		* Dispatched when the list of dynamic xml content has been correctly loaded.
		* @eventType fl.events.Event
		*/
		[Event(name="xml_list_loaded", type="fl.events.Event")]
		public static var XML_LIST_LOADED : String = " xml_list_loaded" ;


		/**
		* Dispatched when the dynamic xml content has been correctly loaded.
		* @eventType fl.events.Event
		*/
		[Event(name="xml_loaded", type="fl.events.Event")]
		public static var XML_LOADED : String = "xml_loaded";
		
		
		
		private static var instance : XMLContainerLoader;
		/**
		 * 
		 * <code>allowInstantiation</code> prop is a boolean used to implicate singleton use
		 * It is allways false, execpt when first instance is made.
		 * 
		 * @default false
		 */
		protected static var allowInstantiation : Boolean = false;
		
		/**
		 * 
		 * Constructor. As this class must be used as a singleton, throws an error
		 * if direct instanciation is called.
		 * 
		 */
		public function XMLContainerLoader()
		{
			if( !allowInstantiation )
			{
				throw new Error("Instance creation not allowed, please use singleton method.");
			}
		}
		
		/**
		 * 
		 * @return the instance of the dynamic xml content loader.
		 */
		public static function getInstance() : XMLContainerLoader
		{
			if( instance == null )
			{
				allowInstantiation = true;
				instance = new XMLContainerLoader();
				allowInstantiation = false;
			}
			return instance;
		}
		
		/**
		 * 
		 */
		public function reset() : void
		{
			instance = null;
		}

		private var folder : String ;
		
		/**
		 * 
		 * @return 
		 */
		public function getFolder() : String 
		{
			return folder;
		}
		
		/**
		 * The url where dynamic xml content is stocked.
		 * @param url 
		 */
		public function loadXMLNames( url : String  ) : void 
		{
			folder = url ;
			var loader : URLLoader = new URLLoader;
			loader.addEventListener(Event.COMPLETE , resourceLoaded ) ;
			loader.addEventListener(IOErrorEvent.IO_ERROR , loadFailed ) ;
			loader.load(new URLRequest( url + "/xml_container_list.txt?timestamp=" + (new Date()).getTime()));
		}
		
		
		private function loadFailed( e : IOErrorEvent ) : void 
		{
			e.target.removeEventListener ( Event.COMPLETE , resourceLoaded ) ;
			e.target.removeEventListener ( IOErrorEvent.IO_ERROR , loadFailed );
			dispatchEvent( new Event(XML_LIST_LOADED));
		}
		
		private function resourceLoaded( e : Event ) :void 
		{
			e.target.removeEventListener ( Event.COMPLETE , resourceLoaded ) ;
			e.target.removeEventListener ( IOErrorEvent.IO_ERROR , loadFailed );
			xmlList = e.target.data.split(/\n/);
			
			 var name : String;
			 
			// Remove whitespaces from names 
			
			var cleanedNames : Array = [];
			for each ( name in xmlList ) 
			{
				cleanedNames.push(  StringUtils.removeWhiteSpace(name )) ;
			}
			xmlList = [];
			xmlList = cleanedNames ;
			
			// Create xmlFile List 
			
			for each ( name in xmlList ) 
			{
				var file : XMLFile = new XMLFile(name);
				file.addEventListener( XMLFile.XML_LOADED , xmlLoaded ) ;
				file.loadXML();
			}
		}
		

		
		private var loadedXMLs : int = 0 ;
		
		private function xmlLoaded ( e : Event ) : void 
		{
			e.target.removeEventListener( XMLFile.XML_LOADED , resourceLoaded ) ;
			loadedXMLs ++ ;
			trace("loaded " + loadedXMLs + " " + xmlList.length );
			if ( loadedXMLs == xmlList.length )
			{
				dispatchEvent( new Event(XML_LIST_LOADED));
			}
		}
		
		/**
		 * The Array used as a dataprovider to build the dynamic xml content list in the admin module.
		 * @return 
		 */
		public function getXMLList() : Array 
		{
			return xmlList;
		}
		
		
	}
}
